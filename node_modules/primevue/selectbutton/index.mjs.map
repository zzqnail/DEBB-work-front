{"version":3,"file":"index.mjs","sources":["../../src/selectbutton/BaseSelectButton.vue","../../src/selectbutton/SelectButton.vue","../../src/selectbutton/SelectButton.vue?vue&type=template&id=d83aac12&lang.js"],"sourcesContent":["<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport SelectButtonStyle from 'primevue/selectbutton/style';\n\nexport default {\n    name: 'BaseSelectButton',\n    extends: BaseEditableHolder,\n    props: {\n        options: Array,\n        optionLabel: null,\n        optionValue: null,\n        optionDisabled: null,\n        multiple: Boolean,\n        allowEmpty: {\n            type: Boolean,\n            default: true\n        },\n        dataKey: null,\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        size: {\n            type: String,\n            default: null\n        }\n    },\n    style: SelectButtonStyle,\n    provide() {\n        return {\n            $pcSelectButton: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\" :data-p=\"dataP\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                :readonly=\"isOptionReadonly(option)\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionReadonly(option) {\n            if (this.allowEmpty) return false;\n\n            let selected = this.isSelected(option);\n\n            if (this.multiple) {\n                return selected && this.d_value.length === 1;\n            } else {\n                return selected;\n            }\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option) || this.isOptionReadonly(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) {\n                    newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                    if (!this.allowEmpty && newValue.length === 0) return;\n                } else {\n                    newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n                }\n            } else {\n                if (selected && !this.allowEmpty) return;\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        dataP() {\n            return cn({\n                invalid: this.$invalid\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n","<template>\n    <div :class=\"cx('root')\" role=\"group\" :aria-labelledby=\"ariaLabelledby\" v-bind=\"ptmi('root')\" :data-p=\"dataP\">\n        <template v-for=\"(option, index) of options\" :key=\"getOptionRenderKey(option)\">\n            <ToggleButton\n                :modelValue=\"isSelected(option)\"\n                :onLabel=\"getOptionLabel(option)\"\n                :offLabel=\"getOptionLabel(option)\"\n                :disabled=\"disabled || isOptionDisabled(option)\"\n                :unstyled=\"unstyled\"\n                :size=\"size\"\n                :readonly=\"isOptionReadonly(option)\"\n                @change=\"onOptionSelect($event, option, index)\"\n                :pt=\"ptm('pcToggleButton')\"\n            >\n                <template v-if=\"$slots.option\" #default>\n                    <slot name=\"option\" :option=\"option\" :index=\"index\">\n                        <span v-bind=\"ptm('pcToggleButton')['label']\">{{ getOptionLabel(option) }}</span>\n                    </slot>\n                </template>\n            </ToggleButton>\n        </template>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport { equals, resolveFieldData } from '@primeuix/utils/object';\nimport Ripple from 'primevue/ripple';\nimport ToggleButton from 'primevue/togglebutton';\nimport BaseSelectButton from './BaseSelectButton.vue';\n\nexport default {\n    name: 'SelectButton',\n    extends: BaseSelectButton,\n    inheritAttrs: false,\n    emits: ['change'],\n    methods: {\n        getOptionLabel(option) {\n            return this.optionLabel ? resolveFieldData(option, this.optionLabel) : option;\n        },\n        getOptionValue(option) {\n            return this.optionValue ? resolveFieldData(option, this.optionValue) : option;\n        },\n        getOptionRenderKey(option) {\n            return this.dataKey ? resolveFieldData(option, this.dataKey) : this.getOptionLabel(option);\n        },\n        isOptionDisabled(option) {\n            return this.optionDisabled ? resolveFieldData(option, this.optionDisabled) : false;\n        },\n        isOptionReadonly(option) {\n            if (this.allowEmpty) return false;\n\n            let selected = this.isSelected(option);\n\n            if (this.multiple) {\n                return selected && this.d_value.length === 1;\n            } else {\n                return selected;\n            }\n        },\n        onOptionSelect(event, option, index) {\n            if (this.disabled || this.isOptionDisabled(option) || this.isOptionReadonly(option)) {\n                return;\n            }\n\n            let selected = this.isSelected(option);\n            let optionValue = this.getOptionValue(option);\n            let newValue;\n\n            if (this.multiple) {\n                if (selected) {\n                    newValue = this.d_value.filter((val) => !equals(val, optionValue, this.equalityKey));\n                    if (!this.allowEmpty && newValue.length === 0) return;\n                } else {\n                    newValue = this.d_value ? [...this.d_value, optionValue] : [optionValue];\n                }\n            } else {\n                if (selected && !this.allowEmpty) return;\n                newValue = selected ? null : optionValue;\n            }\n\n            this.writeValue(newValue, event);\n            this.$emit('change', { event: event, value: newValue });\n        },\n        isSelected(option) {\n            let selected = false;\n            let optionValue = this.getOptionValue(option);\n\n            if (this.multiple) {\n                if (this.d_value) {\n                    for (let val of this.d_value) {\n                        if (equals(val, optionValue, this.equalityKey)) {\n                            selected = true;\n                            break;\n                        }\n                    }\n                }\n            } else {\n                selected = equals(this.d_value, optionValue, this.equalityKey);\n            }\n\n            return selected;\n        }\n    },\n    computed: {\n        equalityKey() {\n            return this.optionValue ? null : this.dataKey;\n        },\n        dataP() {\n            return cn({\n                invalid: this.$invalid\n            });\n        }\n    },\n    directives: {\n        ripple: Ripple\n    },\n    components: {\n        ToggleButton\n    }\n};\n</script>\n"],"names":["name","BaseEditableHolder","props","options","Array","optionLabel","optionValue","optionDisabled","multiple","Boolean","allowEmpty","type","dataKey","ariaLabelledby","String","size","style","SelectButtonStyle","provide","$pcSelectButton","$parentInstance","BaseSelectButton","inheritAttrs","emits","methods","getOptionLabel","option","resolveFieldData","getOptionValue","getOptionRenderKey","isOptionDisabled","isOptionReadonly","selected","isSelected","d_value","length","onOptionSelect","event","index","_this","disabled","newValue","filter","val","equals","equalityKey","concat","_toConsumableArray","writeValue","$emit","value","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","computed","dataP","cn","invalid","$invalid","directives","ripple","Ripple","components","ToggleButton","_openBlock","_createElementBlock","_mergeProps","_ctx","cx","role","ptmi","$options","_Fragment","_renderList","_createBlock","_component_ToggleButton","key","modelValue","onLabel","offLabel","unstyled","readonly","onChange","$event","pt","ptm","$slots","_renderSlot","_createElementVNode","ref_for","_toDisplayString"],"mappings":"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"}